"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cytoscape = exports.CytoscapeJsOutput = void 0;
const fs = __importStar(require("fs"));
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importStar(require("path"));
const cytoscape_generator_1 = require("./cytoscape-generator");
const fs_extra = __importStar(require("fs-extra"));
class CytoscapeJsOutput {
    constructor(staticFolderName, staticSiteFullPath) {
        this.staticFolderName = staticFolderName;
        this.staticSiteFullPath = staticSiteFullPath;
    }
    userOutput() {
        console.log(chalk_1.default.green(`generated a static website with your diagram at ${this.staticSiteFullPath}' }`));
        console.log(chalk_1.default.green(`run 'npx http-server ${this.staticFolderName} -o' to view your interactive diagram`));
    }
}
exports.CytoscapeJsOutput = CytoscapeJsOutput;
class Cytoscape {
    async render(props) {
        const basePath = props.path.replace(/\.[^/.]+$/, "");
        let iconsPath;
        if (__dirname.includes("dist")) {
            iconsPath = (0, path_1.dirname)((0, path_1.dirname)((0, path_1.dirname)((0, path_1.dirname)(__dirname))));
        }
        else {
            iconsPath = (0, path_1.dirname)((0, path_1.dirname)((0, path_1.dirname)(__dirname)));
        }
        await this.renderToCytoscape(props.diagram, basePath, iconsPath);
        return new CytoscapeJsOutput(path_1.default.basename(basePath), path_1.default.resolve(basePath));
    }
    async renderToCytoscape(dia, targetFolder, iconsPath) {
        fs_extra.copySync(__dirname + '/base', targetFolder);
        fs_extra.copySync(iconsPath + '/icons', targetFolder + '/icons');
        const [cyElements, cyStyles] = cytoscape_generator_1.CytoscapeGenerator.generate(dia);
        fs.writeFileSync(`${targetFolder}/cy-elements.json`, JSON.stringify(cyElements));
        fs.writeFileSync(`${targetFolder}/cy-styles.json`, JSON.stringify(cyStyles));
    }
}
exports.Cytoscape = Cytoscape;
//# sourceMappingURL=cytoscape.js.map